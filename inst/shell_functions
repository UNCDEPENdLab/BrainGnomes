#!/bin/bash

#Helper function that converts a set of environment variables into a comma-separated key-value list of
#variables and values. This is used to pass environment variables to qsub -v without having to type out a lot of details
#  Example: envpass qsub_allocation heudiconv_walltime
#  Result:  This will lookup the values of these variables in the environment
#           and result in something like fsl_module=mnh5174_c_g_sc_default,heudiconv_walltime=2:00:00
#  Consider whether we should be quoting the values in case they have weird characters
function envpass() {
  npar=$#
  [ $npar -eq 0 ] && return #nothing to do
  env_names=$@
  local vpass_string=
  for inputName in $env_names; do
    #check whether value contains an equals sign, in which case treat it as a verbatim key-value pair
    if [[ "$inputName" == *"="* ]]; then
      vpass_string="$vpass_string'$inputName',"
    else
      inputVal=${!inputName}
      [ -z "${inputVal}" ] && echo "$inputName is empty" # && exit 1
      vpass_string="$vpass_string$inputName='$inputVal',"
    fi
  done
  vpass_string=$(echo $vpass_string | sed 's/.$//') #trim trailing comma
  echo $vpass_string
}

#looks for qsub_email and qsub_allocation in environment
#accepts positional parameters thereafter that all get converted to -l arguments
function build_qsub_string() {
  local qsub_string=
  if [ -n "$qsub_allocation" ]; then
    qsub_string="${qsub_string} -A $qsub_allocation"
  else
    qsub_string="${qsub_string} -A open" #default to open queue if not specified
  fi

  if [ -n "$qsub_email" ]; then qsub_string="${qsub_string} -M $qsub_email"; fi

  local nargs=$#
  if [ $nargs -gt 0 ]; then
    local env_names=$@
    for inputName in $env_names; do
      #check whether value contains an equals sign, in which case treat it as a verbatim key-value pair
      if [[ "$inputName" == *"="* ]]; then
        qsub_string="$qsub_string -l $inputName"
      else
        inputVal=${!inputName} #use the value of the environment variable
        if [ -n "${inputVal}" ]; then
          qsub_string="$qsub_string -l $inputName='$inputVal'"
        fi
      fi
    done
  fi
  echo $qsub_string
}

# rel is shorthand for "run, echo, log". It looks for the environment $log_file and will write outputs there if specified.
# 
# Initial arguments specify what to do, including
# c: "comment"  -- print the command to the screen and log, but do not execute it
# t: "timeit"   -- print the command to screen and log, execute it, and include execution timing in output
# o: "output"   -- print the command to the log, but not screen, execute it, and print the command result to screen (can be captured by caller)
# -l <log>      -- specify the location of a log file used for logging. If not specified, rel will look at $log_file
#
# After parsing these arguments, all remaining arguments are assumed to be part of the command to be run. 
# rel uses printf-style quoting to preserve complex argument structure, including arguments with spaces,
# quotes, or shell metacharacters.
#
# Quoting Behavior:
#   - relq preserves spaces and special characters in arguments using shell-safe quoting.
#   - Each argument is quoted independently via `printf %q`, so complex argument structure is preserved.
#
# DO NOT pass unquoted variables that contain multiple words or special characters.
#    For example, this will NOT work as expected:
#       var="--arg='value with spaces'"
#       relq echo "Starting:" $var       # Will split into multiple arguments
#
# INSTEAD, quote the variable:
#       relq echo "Starting:" "$var"     # Preserves structure as a single argument
#
# Limitations:
#   - Cannot preserve nested quotes **within** arguments if they are broken during variable expansion.
#   - relq does not parse shell syntax; it only escapes each argument for safe shell execution.
#   - If you need true preservation of original quoting and spacing, pass arguments individually and quote variables.
# 
# Examples:
#   # Just write a comment to the log
#   rel c Hello this is my comment
#
#   # Time the execution of the sleep 10 command
#   rel t sleep 10
#
#   # Write to a particular log file
#   rel -l ~/my_log.txt sleep 10
function rel() {
  #function that runs, echos to terminal, and logs to file an arbitrary command
  local comment=0
  local timeit=0
  local capture_stdout=0
  local log=""          # log file where results should be written
  local tic=0
  local toc=0
  local cmdExit=0       # return value of this command    
  local cmdOutput=""    # stdout output of the command

  [ -n "$log_file" ] && log="$log_file"
  [[ $# -eq 0 ]] && echo "No arguments to rel provided" && return 1

  # Parse control flags
  while [[ $# -gt 0 ]]; do
    case "$1" in
      c) comment=1; shift ;;
      t) timeit=1; shift ;;
      o) capture_stdout=1; shift ;;
      -l) log="$2"; shift 2 ;;
      *) break ;;
    esac
  done

  # Quote each remaining argument safely
  local quoted_args=()
  for arg in "$@"; do
    quoted_args+=("$(printf "%q" "$arg")")
  done
  local cmd_str="${quoted_args[*]}"

  # Handle comment-only output
  if [[ $comment -eq 1 ]]; then
    # echo command to screen and log with dashes to offset text visually
    # if a blank string is passed as the command, include this without dashes (pure whitespace)
    [[ -n "$cmd_str" ]] && cmd_str="--- $cmd_str"
    echo -e "$cmd_str"
    # if we are writing comment to log, prepend with ## to separate comments from output
    [ -n "$log" ] && echo -e "## $cmd_str" >> "$log"
    return 0
  fi

  # log the command
  [ -n "$log" ] && echo -e "$cmd_str" >> "$log"

  # echo command to screen verbatim if we are not capturing stdout
  [ $capture_stdout -eq 0 ] && echo "$cmd_str"

  [ $timeit -eq 1 ] && tic=$(date +%s) # start timing
  
  #run command
  if [[ $capture_stdout -eq 1 ]]; then
    # if we are capturing stdout, we need to save the output of the command and not echo it to the screen
    cmdOutput=$(eval "$cmd_str")
    cmdExit=$?
    [ -n "$log" ] && echo -e "## stdout: $cmdOutput" >> "$log"
  else
    # otherwise, run the command and let its output print to the screen
    eval "$cmd_str"
    cmdExit=$?
  fi

  [ $timeit -eq 1 ] && toc=$(date +%s)

  # handle timing output
  if [[ $timeit -eq 1 && $capture_stdout -eq 0 ]]; then
    local msg="##  Command took $((toc - tic)) seconds"
    [ -n "$log" ] && echo -e "$msg" >> "$log" || echo -e "$msg"
  fi

  # Return captured output if requested
  [ $capture_stdout -eq 1 ] && echo "$cmdOutput"
  return $cmdExit  #exit status of command
}

# this function extracts the jobID number from a qsub job listing and intelligently constructs the desired dependency string
# expects input like: afterok <qsub job listing> afterany <qsub job listing> ...
function build_depend_string() {
  local base="-W depend="
  local args=""
  while [[ $# -gt 0 ]]; do
    if [[ ! -z $2 && $2 != "\"\"" ]]; then
      args=${args}$(link_job_listings ${1}:${2})
    fi

    shift
    shift
  done

  args=$(echo $args | sed 's/,$//')

  if [[ -z args ]]; then
    echo ""
  else
    echo ${base}${args}
  fi
}

# parses out the pure qsub job number
# links a list of these together
# NOTE: leaves a trailing comma
function link_job_listings() {

  base=""
  for arg in $@; do
    arg=$(echo $arg | sed -e 's/\.torque01\.[a-z0-9\.]*edu//g') # get just the number
    base=${base}${arg},
  done

  #base=$(echo $base | sed -e 's/,$//')

  echo $base
}


function trap_job_failure() {
  local step="$1"
  local signal="$2"
  local now
  now=$(date +"%Y-%m-%d %H:%M:%S")
  local fail_file=".${step}_fail"

  # "unknown" if SLURM variables are unset
  local job_id="${SLURM_JOB_ID:-unknown}"
  local job_name="${SLURM_JOB_NAME:-unknown}"
  local err="${stderr_log:-unknown}"

  {
    echo "[$now] $step job failed."
    echo "  Signal     : $signal"
    echo "  Job ID     : $job_id"
    echo "  Job Name   : $job_name"
    echo "  Working Dir: $(pwd)"
    echo
  } >> "$fail_file"

  log_message ERROR $step job failed. Check $err.
  log_message ERROR "  Signal     : $signal"
  log_message ERROR "  Job ID     : $job_id"
  log_message ERROR "  Job Name   : $job_name"
  log_message ERROR "  Working Dir: $(pwd)"

  exit 1
}

function archive_file() {
    fname="$1"
    if [ -f "$fname" ]; then
    	#stat and date are not portable across Linux and BSD...
      [ $( uname ) = Darwin ] && mtime=$( stat -f "%Sm" -t "%Y%m%d_%H%M" "${fname}" ) || mtime=$( date -r "${fname}" +%Y%m%d_%H%M )
      mv "$fname" "${fname}_${mtime}"
    fi
    return 0
}


#adapted from here: https://gist.github.com/aguy/2359833
# usage: trap 'traperror "<name>" $? $LINENO "${BASH_LINENO[0]}" "$BASH_COMMAND" "${FUNCNAME[*]:-::}"' ERR
function traperror () {
    local step="${1:-unknown_step}"
    local err=${2:-1} # error code -- default 1
    local line="${3:-N/A}" # LINENO -- default N/A
    local linecallfunc="${4:-N/A}"
    local command="${5:-unknown_command}"
    local funcstack="${6:-::}"
    local dotfile=".${step}_fail"
    [ -n "$complete_file" ] && dotfile="${complete_file%_complete}_fail" # prefer complete file

    archive_file "$dotfile" #move any existing crash file out of the way
    {
      echo "$(date) $(hostname) $0: ERROR '$command' failed at line $line; exited with status: $err"

      if [[ "$funcstack" != "::" ]]; then
        echo -n "$0: DEBUG Error in ${funcstack} "
        [[ "$linecallfunc" != "N/A" ]] && echo "called at line $linecallfunc"
      fi

      echo -en "\nCurrent working directory:\n  $PWD\n"
      [ -n "$pkg_dir" ] && echo "Location of BrainGnomes installation: $pkg_dir"

      if [ -r "$log_file" ]; then
        local cmd_tail
        cmd_tail=$(tail -n 10 "$log_file")
        printf "\n\nLast 10 lines of command log file:\n---------\n\n%s\n" "$cmd_tail"
      fi

      if [ -r "$stdout_log" ]; then
        local stdout_tail
        stdout_tail=$(tail -n 10 "$stdout_log")
        printf "\n\nLast 10 lines of stdout file:\n---------\n\n%s\n" "$stdout_tail"
      fi

      if [ -r "$stderr_log" ]; then
        local stderr_tail
        stderr_tail=$(tail -n 10 "$stderr_log")
        printf "\n\nLast 10 lines of stderr file:\n---------\n\n%s\n" "$stderr_tail"
      fi
    } >> "$dotfile"

    # send dotfile to stderr
    cat "$dotfile" >&2

    exit "$err"  
}


function log_message() {
  [[ $# -eq 0 ]] && echo "No arguments to log_message provided" && return 1
  local level="$1"
  shift
  local message="$*"
  
  # Timestamp
  local timestamp
  timestamp=$(date +"%Y-%m-%d %H:%M:%S.%3N")

  # Final log line
  local log_line="$level  [$timestamp] $message"

  # Output to screen and/or log file
  echo "$log_line"
  if [[ -n "$log_file" ]]; then
    echo "$log_line" >> "$log_file"
  fi
}

function warn() {
  echo -e "$@" >&2
}

function abspath() {
  [ -z "$1" ] && return 1
  local dir
  dir="$(dirname "$1")"

  if [ ! -d "$dir" ]; then
    warn "WARNING: $FUNCNAME: cannot find dir for '$1' (while in '$(pwd)')"
    echo "$1"
    return 1
  fi

  echo "$(cd "$dir" && pwd)/$(basename "$1")"
}

get_slurm_cpus() {
  if [[ -n "$SLURM_JOB_CPUS_PER_NODE" ]]; then
    echo "$SLURM_JOB_CPUS_PER_NODE"
    return 0
  fi

  if [[ -n "$SLURM_JOB_ID" ]]; then
    scontrol show job "$SLURM_JOB_ID" | awk ' { for (i = 1; i <= NF; i++) { split($i, kv, "="); if (kv[1] == "NumCPUs") { print kv[2]; exit } } }'
    return 0
  fi

  echo "0"
  return 1
}

get_slurm_memory_gb() {
  local mem_mb=""

  if [[ -n "$SLURM_MEM_PER_NODE" ]]; then
    mem_mb="$SLURM_MEM_PER_NODE"
  elif [[ -n "$SLURM_MEM_PER_CPU" && -n "$SLURM_JOB_CPUS_PER_NODE" ]]; then
    mem_mb=$(( SLURM_MEM_PER_CPU * SLURM_JOB_CPUS_PER_NODE ))
  elif [[ -n "$SLURM_JOB_ID" ]]; then
    mem_raw=$(scontrol show job "$SLURM_JOB_ID" | awk -F= '/ReqMem/ {print $2}' | awk '{print $1}')
    mem_val="${mem_raw%?}"
    mem_unit="${mem_raw: -1}"
    case "$mem_unit" in
      M|m) mem_mb="$mem_val" ;;
      G|g) mem_mb=$(( mem_val * 1024 )) ;;
      T|t) mem_mb=$(( mem_val * 1024 * 1024 )) ;;
      *) mem_mb="" ;;
    esac
  fi

  if [[ -n "$mem_mb" ]]; then
    awk "BEGIN {printf \"%.2f\", $mem_mb/1024}"
    return 0
  else
    echo "0.00"
    return 1
  fi
}

function time_elapsed() {
  # requires $start_time to be present
  if [ -z "$start_time" ]; then
    echo "unknown"
    return 1
  fi

  local end_time=$(date +%s)
  local elapsed=$((end_time - start_time))
  local hours=$((elapsed / 3600))
  local minutes=$(((elapsed % 3600) / 60))
  local seconds=$((elapsed % 60))
  
  echo "${hours}h ${minutes}m ${seconds}s"
  return 0
}

# remove extension from any given file, including possible compression extensions
remove_ext() {
  local filename="$1"
  local base="${filename##*/}"  # remove directory path
  base="${base%.gz}"
  base="${base%.bz2}"
  base="${base%.xz}"
  base="${base%.zip}"
  base="${base%.*}"             # remove primary extension (e.g., .nii, .txt, .csv)
  echo "$base"
}

# rm_cli_fields - Remove specific CLI arguments from a command-line string
#
# This function strips out command-line arguments matching a given list of option names.
# It handles flags in the form:
#   --flag=value
#   --flag value
#   --flag            (boolean-style)
#
# It ensures partial matches (e.g., removing "input" doesn't strip "input_regex") are avoided.
#
# Parameters:
#   $1 - The original CLI string
#   $@ - A list of argument names (without the "--" prefix) to remove
#
# Returns:
#   Prints the modified CLI string to stdout with specified arguments removed
#
# Example:
#   cli="--input=2 --test --aroma /path --input_regex=_desc"
#   clean_cli=$(rm_cli_fields "$cli" input aroma)
#   echo "$clean_cli"
#   # Output: --test --input_regex=_desc
rm_cli_fields() {
  local input_str="$1"
  shift
  local -a remove_fields=("$@")

  echo "$input_str" | awk -v fields="${remove_fields[*]}" '
    BEGIN {
      # Build a map of field names to remove
      n = split(fields, f, " ")
      for (i = 1; i <= n; i++) {
        rm["--" f[i]] = 1
      }
    }
    {
      i = 1
      while (i <= NF) {
        key = $i
        val = $(i+1)

        # Check if --flag=value form
        split(key, kv, "=")
        k = kv[1]

        if (rm[key] || rm[k]) {
          # skip --flag or --flag=value or --flag value
          if (key ~ /=/) {
            i += 1
          } else if (val !~ /^--/) {
            i += 2
          } else {
            i += 1
          }
        } else {
          printf "%s ", key
          i += 1
        }
      }
      print ""
    }
  '
}
