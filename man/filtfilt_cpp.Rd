% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{filtfilt_cpp}
\alias{filtfilt_cpp}
\title{Zero-Phase IIR Filtering via Forward and Reverse Filtering}
\arguments{
\item{x}{A numeric vector representing the input time series.}

\item{b}{A numeric vector of numerator (feedforward) filter coefficients.}

\item{a}{A numeric vector of denominator (feedback) filter coefficients. Must have \code{a[0] == 1.0}.}

\item{padlen}{Number of samples to extend on each edge for padding. If \code{-1} (default), uses \code{3 * max(length(a), length(b))}.}

\item{padtype}{Type of padding at the signal boundaries. One of \code{"constant"} (default), \code{"odd"}, \code{"even"}, or \code{"zero"}.}

\item{use_zi}{Logical. If \code{TRUE} (default), use steady-state initial conditions to minimize transients.}
}
\value{
A numeric vector of the same length as \code{x}, containing the filtered signal.
}
\description{
Applies an IIR filter to a 1D numeric signal using forward and backward passes
to eliminate phase distortions, similar to \code{scipy.signal.filtfilt}.
This function implements a pure C++ version using the Direct Form II Transposed structure,
including optional initial condition handling via steady-state initialization.
}
\details{
The function applies the IIR filter in the forward direction, reverses the result,
and applies the filter again, then reverses the final output. This approach
removes phase delay. Padding is used to minimize edge artifacts, and the filter
state is optionally initialized with values derived from the steady-state
step response of the filter (\code{lfilter_zi_arma()}).
}
\references{
\itemize{
\item Scipy Signal Documentation: \url{https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.filtfilt.html}
\item Gustafsson, F. (1996). Determining the initial states in forward-backward filtering. IEEE Transactions on Signal Processing.
}
}
