% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/postprocess_functions.R
\name{temporal_filter}
\alias{temporal_filter}
\title{Apply temporal filtering to a 4D NIfTI image}
\usage{
temporal_filter(
  in_file,
  out_desc = NULL,
  low_pass_hz = 0,
  high_pass_hz = 1/120,
  tr = NULL,
  overwrite = FALSE,
  lg = NULL,
  fsl_img = NULL,
  method = c("fslmaths", "butterworth")
)
}
\arguments{
\item{in_file}{Path to the input 4D NIfTI file.}

\item{out_desc}{The BIDS description field for the file output by this step}

\item{low_pass_hz}{Lower frequency filter cutoff in Hz. Frequencies below this are removed. Use \code{0} to skip.}

\item{high_pass_hz}{Higher frequency filter cutoff in Hz. Frequencies above this are removed. Use \code{Inf} to skip.}

\item{tr}{Repetition time (TR) in seconds. Required to convert Hz to volumes.}

\item{overwrite}{Logical; whether to overwrite the output file if it exists.}

\item{lg}{Optional lgr object used for logging messages}

\item{fsl_img}{Optional Singularity image to execute FSL commands in a containerized environment.}

\item{method}{Character. "fslmaths" to use FSL's -bptf or "butterworth" for a Butterworth filter.}
}
\value{
The path to the temporally filtered output NIfTI file.
}
\description{
Apply high-pass and/or low-pass temporal filtering to an fMRI time series.
By default this calls FSL's \code{fslmaths -bptf} but a Butterworth filter
implemented in \code{butterworth_filter_4d} can also be used. Filter cutoffs
are specified in Hz; for the FSL implementation they are internally converted
to sigma values in volumes using a standard FWHM-to-sigma transformation.
}
\details{
The mean image is added back after filtering to preserve signal intensity. Filtering
is skipped if the output file already exists and \code{overwrite = FALSE}.
}
\keyword{internal}
