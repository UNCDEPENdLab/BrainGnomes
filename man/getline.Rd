% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{getline}
\alias{getline}
\title{Read a Line of Input from the User in Both Interactive and Non-Interactive Sessions}
\usage{
getline(prompt)
}
\arguments{
\item{prompt}{A character string to display as the input prompt.}
}
\value{
A character string with the user's input, or \code{NULL} (\code{R_NilValue}) if input is cancelled
via Escape (\code{ESC}, ASCII 27) or EOF (\code{Ctrl+D} or equivalent).
}
\description{
Provides a safe and portable way to prompt the user for input from the terminal,
working seamlessly in both interactive R sessions and non-interactive \code{Rscript}
sessions (when connected to a TTY).
}
\details{
In an interactive session (e.g., RStudio or R console), this function delegates
to base R's \code{readline()}. In non-interactive contexts where a TTY is available,
it switches the terminal to non-canonical mode and performs low-level character-by-character
input handling with support for echoing, backspace editing, and cancellation
via Escape or EOF. Ctrl+C will terminate the process as usual.
\itemize{
\item Supports visible typing and live editing with backspace.
\item Returns early with \code{NULL} if the user presses Escape or EOF.
\item Uses raw terminal input in non-interactive mode; requires that stdin is a TTY.
\item Does \strong{not} intercept \code{Ctrl+C}; this will terminate the process as normal.
}
}
\examples{
\dontrun{
  # In Rscript or R console
  input <- readline_safe("Enter your name: ")
  if (!is.null(input)) cat("Hello,", input, "!\n")
}

}
