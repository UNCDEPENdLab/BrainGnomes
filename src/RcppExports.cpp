// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// automask
Rcpp::RObject automask(SEXP img, std::string outfile, float clfrac, int NN, int erode_steps, int dilate_steps, float SIhh, int peels, bool fill_holes);
RcppExport SEXP _BrainGnomes_automask(SEXP imgSEXP, SEXP outfileSEXP, SEXP clfracSEXP, SEXP NNSEXP, SEXP erode_stepsSEXP, SEXP dilate_stepsSEXP, SEXP SIhhSEXP, SEXP peelsSEXP, SEXP fill_holesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type img(imgSEXP);
    Rcpp::traits::input_parameter< std::string >::type outfile(outfileSEXP);
    Rcpp::traits::input_parameter< float >::type clfrac(clfracSEXP);
    Rcpp::traits::input_parameter< int >::type NN(NNSEXP);
    Rcpp::traits::input_parameter< int >::type erode_steps(erode_stepsSEXP);
    Rcpp::traits::input_parameter< int >::type dilate_steps(dilate_stepsSEXP);
    Rcpp::traits::input_parameter< float >::type SIhh(SIhhSEXP);
    Rcpp::traits::input_parameter< int >::type peels(peelsSEXP);
    Rcpp::traits::input_parameter< bool >::type fill_holes(fill_holesSEXP);
    rcpp_result_gen = Rcpp::wrap(automask(img, outfile, clfrac, NN, erode_steps, dilate_steps, SIhh, peels, fill_holes));
    return rcpp_result_gen;
END_RCPP
}
// filtfilt_cpp
NumericVector filtfilt_cpp(NumericVector x, NumericVector b, NumericVector a, int padlen, std::string padtype, bool use_zi);
RcppExport SEXP _BrainGnomes_filtfilt_cpp(SEXP xSEXP, SEXP bSEXP, SEXP aSEXP, SEXP padlenSEXP, SEXP padtypeSEXP, SEXP use_ziSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type padlen(padlenSEXP);
    Rcpp::traits::input_parameter< std::string >::type padtype(padtypeSEXP);
    Rcpp::traits::input_parameter< bool >::type use_zi(use_ziSEXP);
    rcpp_result_gen = Rcpp::wrap(filtfilt_cpp(x, b, a, padlen, padtype, use_zi));
    return rcpp_result_gen;
END_RCPP
}
// butterworth_filter_cpp
Rcpp::RObject butterworth_filter_cpp(std::string infile, const std::vector<double>& b, const std::vector<double>& a, std::string outfile, bool internal, std::string padtype, int padlen, bool use_zi, bool demean);
RcppExport SEXP _BrainGnomes_butterworth_filter_cpp(SEXP infileSEXP, SEXP bSEXP, SEXP aSEXP, SEXP outfileSEXP, SEXP internalSEXP, SEXP padtypeSEXP, SEXP padlenSEXP, SEXP use_ziSEXP, SEXP demeanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type infile(infileSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type a(aSEXP);
    Rcpp::traits::input_parameter< std::string >::type outfile(outfileSEXP);
    Rcpp::traits::input_parameter< bool >::type internal(internalSEXP);
    Rcpp::traits::input_parameter< std::string >::type padtype(padtypeSEXP);
    Rcpp::traits::input_parameter< int >::type padlen(padlenSEXP);
    Rcpp::traits::input_parameter< bool >::type use_zi(use_ziSEXP);
    Rcpp::traits::input_parameter< bool >::type demean(demeanSEXP);
    rcpp_result_gen = Rcpp::wrap(butterworth_filter_cpp(infile, b, a, outfile, internal, padtype, padlen, use_zi, demean));
    return rcpp_result_gen;
END_RCPP
}
// getline
SEXP getline(std::string prompt);
RcppExport SEXP _BrainGnomes_getline(SEXP promptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type prompt(promptSEXP);
    rcpp_result_gen = Rcpp::wrap(getline(prompt));
    return rcpp_result_gen;
END_RCPP
}
// image_quantile
NumericVector image_quantile(std::string in_file, Nullable<std::string> brain_mask, NumericVector quantiles, bool exclude_zero);
RcppExport SEXP _BrainGnomes_image_quantile(SEXP in_fileSEXP, SEXP brain_maskSEXP, SEXP quantilesSEXP, SEXP exclude_zeroSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type in_file(in_fileSEXP);
    Rcpp::traits::input_parameter< Nullable<std::string> >::type brain_mask(brain_maskSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type quantiles(quantilesSEXP);
    Rcpp::traits::input_parameter< bool >::type exclude_zero(exclude_zeroSEXP);
    rcpp_result_gen = Rcpp::wrap(image_quantile(in_file, brain_mask, quantiles, exclude_zero));
    return rcpp_result_gen;
END_RCPP
}
// lmfit_residuals_4d
Rcpp::RObject lmfit_residuals_4d(std::string infile, const arma::mat& X, const Rcpp::Nullable<Rcpp::LogicalVector>& include_rows, bool add_intercept, std::string outfile, bool internal, bool preserve_mean, double set_mean, const Rcpp::Nullable<Rcpp::IntegerVector>& regress_cols, bool exclusive);
RcppExport SEXP _BrainGnomes_lmfit_residuals_4d(SEXP infileSEXP, SEXP XSEXP, SEXP include_rowsSEXP, SEXP add_interceptSEXP, SEXP outfileSEXP, SEXP internalSEXP, SEXP preserve_meanSEXP, SEXP set_meanSEXP, SEXP regress_colsSEXP, SEXP exclusiveSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type infile(infileSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Rcpp::LogicalVector>& >::type include_rows(include_rowsSEXP);
    Rcpp::traits::input_parameter< bool >::type add_intercept(add_interceptSEXP);
    Rcpp::traits::input_parameter< std::string >::type outfile(outfileSEXP);
    Rcpp::traits::input_parameter< bool >::type internal(internalSEXP);
    Rcpp::traits::input_parameter< bool >::type preserve_mean(preserve_meanSEXP);
    Rcpp::traits::input_parameter< double >::type set_mean(set_meanSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Rcpp::IntegerVector>& >::type regress_cols(regress_colsSEXP);
    Rcpp::traits::input_parameter< bool >::type exclusive(exclusiveSEXP);
    rcpp_result_gen = Rcpp::wrap(lmfit_residuals_4d(infile, X, include_rows, add_intercept, outfile, internal, preserve_mean, set_mean, regress_cols, exclusive));
    return rcpp_result_gen;
END_RCPP
}
// menu_safe
int menu_safe(Rcpp::CharacterVector choices, Rcpp::Nullable<std::string> title);
RcppExport SEXP _BrainGnomes_menu_safe(SEXP choicesSEXP, SEXP titleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type choices(choicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type title(titleSEXP);
    rcpp_result_gen = Rcpp::wrap(menu_safe(choices, title));
    return rcpp_result_gen;
END_RCPP
}
// natural_spline_4d
Rcpp::RObject natural_spline_4d(std::string infile, const std::vector<int>& t_interpolate, bool edge_nn, std::string outfile, bool internal);
RcppExport SEXP _BrainGnomes_natural_spline_4d(SEXP infileSEXP, SEXP t_interpolateSEXP, SEXP edge_nnSEXP, SEXP outfileSEXP, SEXP internalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type infile(infileSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type t_interpolate(t_interpolateSEXP);
    Rcpp::traits::input_parameter< bool >::type edge_nn(edge_nnSEXP);
    Rcpp::traits::input_parameter< std::string >::type outfile(outfileSEXP);
    Rcpp::traits::input_parameter< bool >::type internal(internalSEXP);
    rcpp_result_gen = Rcpp::wrap(natural_spline_4d(infile, t_interpolate, edge_nn, outfile, internal));
    return rcpp_result_gen;
END_RCPP
}
// natural_spline_interp
NumericVector natural_spline_interp(NumericVector x, NumericVector y, NumericVector xout);
RcppExport SEXP _BrainGnomes_natural_spline_interp(SEXP xSEXP, SEXP ySEXP, SEXP xoutSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type xout(xoutSEXP);
    rcpp_result_gen = Rcpp::wrap(natural_spline_interp(x, y, xout));
    return rcpp_result_gen;
END_RCPP
}
// remove_nifti_volumes
void remove_nifti_volumes(std::string infile, const std::vector<int>& remove_tpts, std::string outfile);
RcppExport SEXP _BrainGnomes_remove_nifti_volumes(SEXP infileSEXP, SEXP remove_tptsSEXP, SEXP outfileSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type infile(infileSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type remove_tpts(remove_tptsSEXP);
    Rcpp::traits::input_parameter< std::string >::type outfile(outfileSEXP);
    remove_nifti_volumes(infile, remove_tpts, outfile);
    return R_NilValue;
END_RCPP
}
// select_list_safe
Rcpp::CharacterVector select_list_safe(Rcpp::CharacterVector choices, Rcpp::Nullable<std::string> title, bool multiple);
RcppExport SEXP _BrainGnomes_select_list_safe(SEXP choicesSEXP, SEXP titleSEXP, SEXP multipleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type choices(choicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type title(titleSEXP);
    Rcpp::traits::input_parameter< bool >::type multiple(multipleSEXP);
    rcpp_result_gen = Rcpp::wrap(select_list_safe(choices, title, multiple));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BrainGnomes_automask", (DL_FUNC) &_BrainGnomes_automask, 9},
    {"_BrainGnomes_filtfilt_cpp", (DL_FUNC) &_BrainGnomes_filtfilt_cpp, 6},
    {"_BrainGnomes_butterworth_filter_cpp", (DL_FUNC) &_BrainGnomes_butterworth_filter_cpp, 9},
    {"_BrainGnomes_getline", (DL_FUNC) &_BrainGnomes_getline, 1},
    {"_BrainGnomes_image_quantile", (DL_FUNC) &_BrainGnomes_image_quantile, 4},
    {"_BrainGnomes_lmfit_residuals_4d", (DL_FUNC) &_BrainGnomes_lmfit_residuals_4d, 10},
    {"_BrainGnomes_menu_safe", (DL_FUNC) &_BrainGnomes_menu_safe, 2},
    {"_BrainGnomes_natural_spline_4d", (DL_FUNC) &_BrainGnomes_natural_spline_4d, 5},
    {"_BrainGnomes_natural_spline_interp", (DL_FUNC) &_BrainGnomes_natural_spline_interp, 3},
    {"_BrainGnomes_remove_nifti_volumes", (DL_FUNC) &_BrainGnomes_remove_nifti_volumes, 3},
    {"_BrainGnomes_select_list_safe", (DL_FUNC) &_BrainGnomes_select_list_safe, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_BrainGnomes(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
